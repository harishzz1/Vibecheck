'use client'

import { useState, useRef, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  MessageSquare, 
  Send, 
  Shield, 
  AlertTriangle, 
  Info, 
  Lightbulb, 
  Brain, 
  X,
  Loader2,
  Bot,
  User,
  FileText,
  Bug,
  GripVertical
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Textarea } from '@/components/ui/textarea'

interface VulnerabilityMessage {
  id: number
  type: string
  risk: string
  riskLevel: 'critical' | 'high' | 'medium' | 'low'
  file: string
  line: number
  message: string
  suggestion: string
  timestamp: Date
  cweId?: string
}

interface ChatMessage {
  id: string
  type: 'user' | 'assistant'
  content: string
  timestamp: Date
  vulnerability?: VulnerabilityMessage
  isStreaming?: boolean
}

interface VulnerabilitySidebarProps {
  vulnerabilities: VulnerabilityMessage[]
  selectedFile?: string
  fileContent?: string
  isScanning: boolean
  onAutoFix?: (vulnerability: VulnerabilityMessage) => Promise<void>
  isFixingId?: number | null
  onCodeApply?: (filePath: string, newContent: string) => void
  allFiles?: Record<string, any>
}

export function VulnerabilitySidebar({ 
  vulnerabilities, 
  selectedFile, 
  fileContent,
  isScanning,
  onAutoFix,
  isFixingId,
  onCodeApply,
  allFiles 
}: VulnerabilitySidebarProps) {
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [selectedVulnerability, setSelectedVulnerability] = useState<VulnerabilityMessage | null>(null)
  const [showContext, setShowContext] = useState(false)
  const [attachedContext, setAttachedContext] = useState<{
    file?: string
    content?: string
    lines?: { start: number; end: number }
  }>({})
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLTextAreaElement>(null)
  const messagesContainerRef = useRef<HTMLDivElement>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const sidebarRef = useRef<HTMLDivElement>(null)
  const [sidebarWidth, setSidebarWidth] = useState(320)
  const [isResizing, setIsResizing] = useState(false)

  // Add welcome message on mount
  useEffect(() => {
    if (chatMessages.length === 0) {
      setChatMessages([{
        id: 'welcome',
        type: 'assistant',
        content: `Hi! I'm your AI security assistant powered by Google Gemini. I can help you:

• **Understand security vulnerabilities** in your code
• **Provide specific fix recommendations** with examples
• **Explain security best practices** and CWE classifications
• **Analyze your code** for potential security issues
• **Suggest secure coding patterns** for different languages

💡 **Quick tip:** You can switch between different Gemini models using the dropdown in the top bar. Gemini 1.5 Flash (recommended) provides faster responses with good accuracy.

${vulnerabilities.length > 0 ? `🔍 I found **${vulnerabilities.length} potential security issue${vulnerabilities.length > 1 ? 's' : ''}** in your codebase. Click on any vulnerability above to learn more, or ask me anything about security!` : '📁 Upload a project folder and run a security scan to get started, then I can provide context-specific security advice.'}`,
        timestamp: new Date()
      }])
    }
  }, [])

  // Filter vulnerabilities for selected file
  const filteredVulnerabilities = selectedFile 
    ? vulnerabilities.filter(v => v.file === selectedFile)
    : vulnerabilities

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'critical': return 'text-red-400 bg-red-500/10 border-red-500/20'
      case 'high': return 'text-orange-400 bg-orange-500/10 border-orange-500/20'
      case 'medium': return 'text-yellow-400 bg-yellow-500/10 border-yellow-500/20'
      default: return 'text-blue-400 bg-blue-500/10 border-blue-500/20'
    }
  }

  const getRiskIcon = (level: string) => {
    switch (level) {
      case 'critical': return <AlertTriangle className="w-4 h-4" />
      case 'high': return <AlertTriangle className="w-4 h-4" />
      case 'medium': return <Info className="w-4 h-4" />
      default: return <Shield className="w-4 h-4" />
    }
  }

  const sendMessage = async () => {
    if (!inputMessage.trim() || isTyping) return

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage.trim(),
      timestamp: new Date()
    }

    setChatMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsTyping(true)

    try {
      // Create context for the AI
      const context = {
        selectedFile,
        fileContent,
        vulnerabilities: filteredVulnerabilities,
        selectedVulnerability,
        userMessage: inputMessage.trim()
      }

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          message: inputMessage.trim(),
          context,
          model: 'gemini-1.5-flash'
        })
      })

      const data = await response.json()

      if (!response.ok) {
        // Handle quota exceeded error
        if (response.status === 429) {
          const errorMessage: ChatMessage = {
            id: Date.now().toString() + '_quota',
            type: 'assistant',
            content: 'API quota temporarily exceeded. Please wait about 30 seconds and try again. You can also try switching to a different model in the top dropdown.',
            timestamp: new Date()
          }
          setChatMessages(prev => [...prev, errorMessage])
          return
        }
        throw new Error(data.error || 'Failed to get AI response')
      }

      const assistantMessage: ChatMessage = {
        id: Date.now().toString() + '_assistant',
        type: 'assistant',
        content: data.response || 'Sorry, I encountered an error processing your request.',
        timestamp: new Date()
      }

      setChatMessages(prev => [...prev, assistantMessage])
    } catch (error) {
      console.error('Chat error:', error)
      const errorMessage: ChatMessage = {
        id: Date.now().toString() + '_error',
        type: 'assistant',
        content: error instanceof Error ? error.message : 'Sorry, I encountered an error. Please try again in a few moments.',
        timestamp: new Date()
      }
      setChatMessages(prev => [...prev, errorMessage])
    } finally {
      setIsTyping(false)
    }
  }

  const askAboutVulnerability = (vuln: VulnerabilityMessage) => {
    setSelectedVulnerability(vuln)
    setInputMessage(`Explain this ${vuln.type} vulnerability in ${vuln.file} at line ${vuln.line}. How can I fix it?`)
    inputRef.current?.focus()
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (messagesContainerRef.current) {
      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight
    }
  }, [chatMessages, isTyping])

  // Resize functionality
  const handleMouseDown = (e: React.MouseEvent) => {
    setIsResizing(true)
    e.preventDefault()
    
    const startX = e.clientX
    const startWidth = sidebarWidth

    const handleMouseMove = (e: MouseEvent) => {
      const deltaX = startX - e.clientX
      const newWidth = Math.max(280, Math.min(600, startWidth + deltaX))
      setSidebarWidth(newWidth)
    }

    const handleMouseUp = () => {
      setIsResizing(false)
      document.removeEventListener('mousemove', handleMouseMove)
      document.removeEventListener('mouseup', handleMouseUp)
      document.body.style.cursor = 'default'
      document.body.style.userSelect = 'auto'
    }

    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', handleMouseUp)
    document.body.style.cursor = 'col-resize'
    document.body.style.userSelect = 'none'
  }

  return (
    <div 
      ref={sidebarRef}
      className="relative h-full bg-black/40 backdrop-blur-2xl border-l border-white/5 flex"
      style={{ width: sidebarWidth }}
    >
      {/* Resize Handle */}
      <div
        className="absolute left-0 top-0 w-1 h-full cursor-col-resize group hover:bg-blue-500/50 transition-colors z-10"
        onMouseDown={handleMouseDown}
      >
        <div className="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
          <div className="w-4 h-8 bg-white/10 rounded-r flex items-center justify-center backdrop-blur-sm">
            <GripVertical className="w-3 h-3 text-white/50" />
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col ml-1">
        {/* Header */}
        <div className="p-4 border-b border-white/5 flex-shrink-0">
          <div className="flex items-center gap-2 mb-2">
            <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
              <Bot className="w-4 h-4 text-white" />
            </div>
            <div>
              <h3 className="text-sm font-medium text-white">AI Security Assistant</h3>
              <p className="text-xs text-white/50">Powered by Gemini 2.0 Pro</p>
            </div>
          </div>
          
          {/* Vulnerability Summary */}
          {filteredVulnerabilities.length > 0 && (
            <motion.div 
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-3 p-3 bg-white/5 rounded-lg"
            >
              <div className="flex items-center gap-2">
                <div className="w-1.5 h-1.5 bg-red-400 rounded-full animate-pulse"></div>
                <p className="text-xs text-white/60">
                  {filteredVulnerabilities.length} issue{filteredVulnerabilities.length !== 1 ? 's' : ''} found
                  {selectedFile && ` in ${selectedFile}`}
                </p>
              </div>
            </motion.div>
          )}
        </div>

        {/* Main Content Area */}
        <div className="flex-1 flex flex-col min-h-0">
          {/* Vulnerabilities List */}
          <div className="flex-shrink-0 border-b border-white/5" style={{ maxHeight: '240px' }}>
            <div className="h-full overflow-y-auto p-4">
              <div className="space-y-3">
                {filteredVulnerabilities.length === 0 ? (
                  <motion.div 
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="text-center py-6"
                  >
                    <Shield className="w-8 h-8 text-green-400 mx-auto mb-2" />
                    <p className="text-sm text-white/60">
                      {isScanning ? 'Scanning for vulnerabilities...' : 'No vulnerabilities found'}
                    </p>
                    {isScanning && (
                      <motion.div
                        className="w-4 h-4 border border-blue-400 border-t-transparent rounded-full mx-auto mt-2"
                        animate={{ rotate: 360 }}
                        transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
                      />
                    )}
                  </motion.div>
                ) : (
                  filteredVulnerabilities.map((vuln, index) => (
                    <motion.div
                      key={vuln.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.05 }}
                      className="bg-white/5 border border-white/10 rounded-lg p-3 hover:bg-white/8 transition-all duration-200 cursor-pointer"
                      onClick={() => askAboutVulnerability(vuln)}
                    >
                      <div className="flex items-start gap-2">
                        <div className={`p-1 rounded ${getRiskColor(vuln.riskLevel)}`}>
                          {getRiskIcon(vuln.riskLevel)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            <Badge variant="outline" className={`text-xs ${getRiskColor(vuln.riskLevel)}`}>
                              {vuln.risk}
                            </Badge>
                            {vuln.cweId && (
                              <span className="text-xs text-white/40">{vuln.cweId}</span>
                            )}
                          </div>
                          <p className="text-xs text-white/80 mb-1 line-clamp-2">
                            {vuln.message}
                          </p>
                          <p className="text-xs text-white/50 font-mono">
                            {vuln.file}:{vuln.line}
                          </p>
                        </div>
                      </div>
                      
                      <div className="flex gap-1 mt-2">
                        <Button 
                          size="sm" 
                          variant="ghost"
                          className="h-6 px-2 text-xs text-white/60 hover:text-white/80"
                          onClick={(e) => {
                            e.stopPropagation()
                            askAboutVulnerability(vuln)
                          }}
                        >
                          <MessageSquare className="w-3 h-3 mr-1" />
                          Ask AI
                        </Button>
                        {onAutoFix && (
                          <Button
                            size="sm"
                            variant="ghost"
                            disabled={isFixingId === vuln.id}
                            onClick={async (e) => {
                              e.stopPropagation()
                              await onAutoFix(vuln)
                            }}
                            className="h-6 px-2 text-xs text-blue-400 hover:text-blue-300"
                          >
                            {isFixingId === vuln.id ? (
                              <Loader2 className="w-3 h-3 mr-1 animate-spin" />
                            ) : (
                              <Shield className="w-3 h-3 mr-1" />
                            )}
                            Fix
                          </Button>
                        )}
                      </div>
                    </motion.div>
                  ))
                )}
              </div>
            </div>
          </div>

          {/* Chat Area */}
          <div className="flex-1 flex flex-col min-h-0">
            {/* Messages */}
            <div 
              ref={messagesContainerRef}
              className="flex-1 overflow-y-auto p-4 space-y-4"
              style={{ 
                scrollBehavior: 'smooth',
                overflowAnchor: 'auto'
              }}
            >
              {chatMessages.length === 0 ? (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="text-center py-8"
                >
                  <Brain className="w-8 h-8 text-white/20 mx-auto mb-2" />
                  <p className="text-sm text-white/40 mb-2">
                    Hi! I'm your AI security assistant.
                  </p>
                  <p className="text-xs text-white/30">
                    Ask me about vulnerabilities, security best practices, or code fixes.
                  </p>
                </motion.div>
              ) : (
                <>
                  {chatMessages.map((message) => (
                    <motion.div
                      key={message.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      className={`flex gap-2 w-full ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      {message.type === 'assistant' && (
                        <div className="w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                          <Bot className="w-3 h-3 text-white" />
                        </div>
                      )}
                      <div
                        className={`max-w-[75%] min-w-0 p-3 rounded-lg ${
                          message.type === 'user'
                            ? 'bg-blue-600 text-white ml-auto'
                            : 'bg-white/10 text-white/90'
                        }`}
                        style={{ overflowWrap: 'anywhere' }}
                      >
                        <p className="text-sm leading-relaxed whitespace-pre-wrap break-words">
                          {message.content}
                        </p>
                        <p className="text-xs opacity-60 mt-2">
                          {message.timestamp.toLocaleTimeString()}
                        </p>
                      </div>
                      {message.type === 'user' && (
                        <div className="w-6 h-6 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                          <User className="w-3 h-3 text-white" />
                        </div>
                      )}
                    </motion.div>
                  ))}
                  
                  {isTyping && (
                    <motion.div
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="flex gap-2"
                    >
                      <div className="w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                        <Bot className="w-3 h-3 text-white" />
                      </div>
                      <div className="bg-white/10 p-3 rounded-lg">
                        <motion.div
                          className="flex gap-1"
                          animate={{ opacity: [0.4, 1, 0.4] }}
                          transition={{ duration: 1.5, repeat: Infinity }}
                        >
                          <div className="w-2 h-2 bg-white/60 rounded-full" />
                          <div className="w-2 h-2 bg-white/60 rounded-full" />
                          <div className="w-2 h-2 bg-white/60 rounded-full" />
                        </motion.div>
                      </div>
                    </motion.div>
                  )}
                </>
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <div className="flex-shrink-0 p-4 border-t border-white/5">
              <div className="flex gap-2">
                <Textarea
                  ref={inputRef}
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Ask about vulnerabilities or security..."
                  className="flex-1 min-h-[40px] max-h-24 bg-white/5 border-white/10 text-white placeholder-white/40 resize-none text-sm"
                  disabled={isTyping}
                />
                <Button
                  onClick={sendMessage}
                  disabled={!inputMessage.trim() || isTyping}
                  className="px-3 bg-blue-600 hover:bg-blue-700 text-white self-end"
                >
                  {isTyping ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Send className="w-4 h-4" />
                  )}
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}